-- Badminton App Database Initialization Script
-- This script creates a complete database from scratch for fresh deployments
-- Run this script to set up the entire database with all tables, data, and relationships

-- ============================================================================
-- SCHEMA SETUP
-- ============================================================================

-- Create schemas
CREATE SCHEMA IF NOT EXISTS badminton;
CREATE SCHEMA IF NOT EXISTS access_control;

-- Set search path
SET search_path TO badminton, access_control, public;

-- ============================================================================
-- ACCESS CONTROL SYSTEM
-- ============================================================================

-- Role table
DROP TABLE IF EXISTS access_control."Role" CASCADE;
CREATE TABLE access_control."Role" (
    "role_id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 CYCLE),
    "role_name" text NOT NULL DEFAULT 'Neuer Benutzertyp'::text,
    "locked" bool NOT NULL DEFAULT TRUE,
    PRIMARY KEY ("role_id")
);

-- PermissionGroup table
DROP TABLE IF EXISTS access_control."PermissionGroup" CASCADE;
CREATE TABLE access_control."PermissionGroup" (
    "permission_group_id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 CYCLE),
    "permission_group_name" text NOT NULL DEFAULT 'permission_group_x'::text,
    PRIMARY KEY ("permission_group_id"),
    CONSTRAINT permission_group_permission_group_name_key UNIQUE ("permission_group_name")
);

-- Permission table
DROP TABLE IF EXISTS access_control."Permission" CASCADE;
CREATE TABLE access_control."Permission" (
    "permission_id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 CYCLE),
    "permission_key" text NOT NULL DEFAULT 'can_do_x'::text,
    "permission_group_id" int4 NULL,
    PRIMARY KEY ("permission_id"),
    CONSTRAINT app_permission_permission_key_key UNIQUE ("permission_key"),
    CONSTRAINT permission_permission_group_id_fkey FOREIGN KEY ("permission_group_id") REFERENCES access_control."PermissionGroup"(permission_group_id)
);

-- RolesPermissions junction table
DROP TABLE IF EXISTS access_control."RolesPermissions" CASCADE;
CREATE TABLE access_control."RolesPermissions" (
    "role_id" int4 NOT NULL,
    "permission_id" int4 NOT NULL,
    CONSTRAINT roles_permissions_permission_id_pkey PRIMARY KEY ("role_id", "permission_id"),
    CONSTRAINT roles_permissions_permission_id_fkey FOREIGN KEY ("permission_id") REFERENCES access_control."Permission"("permission_id") ON DELETE CASCADE,
    CONSTRAINT roles_permissions_role_id_fkey FOREIGN KEY ("role_id") REFERENCES access_control."Role"("role_id") ON DELETE CASCADE
);

-- ============================================================================
-- BADMINTON APP TABLES
-- ============================================================================

-- Users table (integrated with access control)
DROP TABLE IF EXISTS badminton."User" CASCADE;
CREATE TABLE badminton."User" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 CYCLE),
    "username" VARCHAR(50) NOT NULL,
    "email" VARCHAR(100) NOT NULL,
    "full_name" VARCHAR(100) NOT NULL,
    "hashed_password" VARCHAR(255) NOT NULL,
    "is_active" BOOLEAN NOT NULL DEFAULT TRUE,
    "role_id" INTEGER,
    "profile_picture_url" VARCHAR(500),
    "profile_picture_updated_at" TIMESTAMP WITH TIME ZONE,
    "created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    PRIMARY KEY ("id"),
    CONSTRAINT user_username_unique UNIQUE ("username"),
    CONSTRAINT user_email_unique UNIQUE ("email"),
    CONSTRAINT user_role_id_fkey FOREIGN KEY ("role_id") REFERENCES access_control."Role"("role_id")
);

-- Add tournament status enum first
CREATE TYPE badminton.tournament_status AS ENUM ('draft', 'inviting', 'active', 'completed');

-- Tournaments table
DROP TABLE IF EXISTS badminton."Tournament" CASCADE;
CREATE TABLE badminton."Tournament" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 CYCLE),
    "name" VARCHAR(100) NOT NULL,
    "description" TEXT,
    "start_date" TIMESTAMP WITH TIME ZONE NOT NULL,
    "end_date" TIMESTAMP WITH TIME ZONE,
    "is_active" BOOLEAN NOT NULL DEFAULT TRUE,
    "status" badminton.tournament_status DEFAULT 'draft',
    "created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    PRIMARY KEY ("id")
);

-- Matches table (with all verification fields)
DROP TABLE IF EXISTS badminton."Match" CASCADE;
CREATE TABLE badminton."Match" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 CYCLE),
    "player1_id" INTEGER NOT NULL,
    "player2_id" INTEGER NOT NULL,
    "player1_score" INTEGER NOT NULL,
    "player2_score" INTEGER NOT NULL,
    "match_type" VARCHAR(20) NOT NULL CHECK ("match_type" IN ('CASUAL', 'TOURNAMENT')),
    "status" VARCHAR(30) NOT NULL DEFAULT 'PENDING_VERIFICATION' CHECK ("status" IN ('PENDING_VERIFICATION', 'VERIFIED', 'REJECTED')),
    "submitted_by_id" INTEGER NOT NULL,
    "verified_by_id" INTEGER,
    "tournament_id" INTEGER,
    "notes" TEXT,
    "match_date" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    "created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    "verified_at" TIMESTAMP WITH TIME ZONE,
    "player1_verified" BOOLEAN NOT NULL DEFAULT FALSE,
    "player2_verified" BOOLEAN NOT NULL DEFAULT FALSE,
    "player1_verified_by_id" INTEGER,
    "player2_verified_by_id" INTEGER,
    PRIMARY KEY ("id"),
    CONSTRAINT match_player1_id_fkey FOREIGN KEY ("player1_id") REFERENCES badminton."User"("id") ON DELETE CASCADE,
    CONSTRAINT match_player2_id_fkey FOREIGN KEY ("player2_id") REFERENCES badminton."User"("id") ON DELETE CASCADE,
    CONSTRAINT match_submitted_by_id_fkey FOREIGN KEY ("submitted_by_id") REFERENCES badminton."User"("id") ON DELETE CASCADE,
    CONSTRAINT match_verified_by_id_fkey FOREIGN KEY ("verified_by_id") REFERENCES badminton."User"("id") ON DELETE SET NULL,
    CONSTRAINT match_tournament_id_fkey FOREIGN KEY ("tournament_id") REFERENCES badminton."Tournament"("id") ON DELETE SET NULL,
    CONSTRAINT match_player1_verified_by_id_fkey FOREIGN KEY ("player1_verified_by_id") REFERENCES badminton."User"("id") ON DELETE SET NULL,
    CONSTRAINT match_player2_verified_by_id_fkey FOREIGN KEY ("player2_verified_by_id") REFERENCES badminton."User"("id") ON DELETE SET NULL,
    CONSTRAINT match_different_players CHECK ("player1_id" != "player2_id")
);

-- Medals table
DROP TABLE IF EXISTS badminton.medals CASCADE;
CREATE TABLE badminton.medals (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    tournament_id INTEGER NOT NULL,
    position INTEGER NOT NULL,
    medal_type VARCHAR(10) NOT NULL CHECK (medal_type IN ('gold', 'silver', 'bronze', 'wood')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_medals_user FOREIGN KEY (user_id) REFERENCES badminton."User"(id) ON DELETE CASCADE,
    CONSTRAINT fk_medals_tournament FOREIGN KEY (tournament_id) REFERENCES badminton."Tournament"(id) ON DELETE CASCADE,
    CONSTRAINT unique_user_tournament_medal UNIQUE (user_id, tournament_id)
);

-- Tournament participants table
DROP TABLE IF EXISTS badminton.tournament_participants CASCADE;
CREATE TABLE badminton.tournament_participants (
    id SERIAL PRIMARY KEY,
    tournament_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    joined_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    is_active BOOLEAN DEFAULT TRUE,
    CONSTRAINT fk_tournament_participants_tournament 
        FOREIGN KEY (tournament_id) REFERENCES badminton."Tournament"(id) ON DELETE CASCADE,
    CONSTRAINT fk_tournament_participants_user 
        FOREIGN KEY (user_id) REFERENCES badminton."User"(id) ON DELETE CASCADE,
    CONSTRAINT unique_tournament_participant 
        UNIQUE (tournament_id, user_id)
);

-- Tournament invitations table
DROP TABLE IF EXISTS badminton.tournament_invitations CASCADE;
CREATE TABLE badminton.tournament_invitations (
    id SERIAL PRIMARY KEY,
    tournament_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    invited_by INTEGER NOT NULL,
    status VARCHAR(20) NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'accepted', 'declined', 'expired')),
    invited_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    responded_at TIMESTAMP WITH TIME ZONE,
    expires_at TIMESTAMP WITH TIME ZONE DEFAULT (CURRENT_TIMESTAMP + INTERVAL '7 days'),
    CONSTRAINT fk_tournament_invitations_tournament 
        FOREIGN KEY (tournament_id) REFERENCES badminton."Tournament"(id) ON DELETE CASCADE,
    CONSTRAINT fk_tournament_invitations_user 
        FOREIGN KEY (user_id) REFERENCES badminton."User"(id) ON DELETE CASCADE,
    CONSTRAINT fk_tournament_invitations_invited_by 
        FOREIGN KEY (invited_by) REFERENCES badminton."User"(id) ON DELETE CASCADE,
    CONSTRAINT unique_tournament_invitation 
        UNIQUE (tournament_id, user_id)
);

-- Reports table
DROP TABLE IF EXISTS badminton.reports CASCADE;
CREATE TABLE badminton.reports (
    id SERIAL PRIMARY KEY,
    created_by_id INTEGER NOT NULL REFERENCES badminton."User"(id) ON DELETE CASCADE,
    event_date DATE NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Report reactions table
DROP TABLE IF EXISTS badminton.report_reactions CASCADE;
CREATE TABLE badminton.report_reactions (
    id SERIAL PRIMARY KEY,
    report_id INTEGER NOT NULL REFERENCES badminton.reports(id) ON DELETE CASCADE,
    user_id INTEGER NOT NULL REFERENCES badminton."User"(id) ON DELETE CASCADE,
    emoji VARCHAR(10) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(report_id, user_id, emoji)
);

-- Report views table
DROP TABLE IF EXISTS badminton.report_views CASCADE;
CREATE TABLE badminton.report_views (
    id SERIAL PRIMARY KEY,
    report_id INTEGER NOT NULL REFERENCES badminton.reports(id) ON DELETE CASCADE,
    user_id INTEGER NOT NULL REFERENCES badminton."User"(id) ON DELETE CASCADE,
    viewed_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (report_id, user_id)
);

-- Posts table
DROP TABLE IF EXISTS badminton."Post" CASCADE;
CREATE TABLE badminton."Post" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 CYCLE),
    "user_id" INTEGER NOT NULL,
    "content" TEXT NOT NULL,
    "created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    "is_deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "comment_count" INTEGER NOT NULL DEFAULT 0,
    PRIMARY KEY ("id"),
    CONSTRAINT post_user_id_fkey FOREIGN KEY ("user_id") REFERENCES badminton."User"("id") ON DELETE CASCADE
);

-- Comments table
DROP TABLE IF EXISTS badminton."Comment" CASCADE;
CREATE TABLE badminton."Comment" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 CYCLE),
    "post_id" INTEGER NOT NULL,
    "user_id" INTEGER NOT NULL,
    "content" TEXT NOT NULL,
    "parent_comment_id" INTEGER,
    "created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    "is_deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    PRIMARY KEY ("id"),
    CONSTRAINT comment_post_id_fkey FOREIGN KEY ("post_id") REFERENCES badminton."Post"("id") ON DELETE CASCADE,
    CONSTRAINT comment_user_id_fkey FOREIGN KEY ("user_id") REFERENCES badminton."User"("id") ON DELETE CASCADE,
    CONSTRAINT comment_parent_comment_id_fkey FOREIGN KEY ("parent_comment_id") REFERENCES badminton."Comment"("id") ON DELETE CASCADE
);

-- Attachments table
DROP TABLE IF EXISTS badminton."Attachment" CASCADE;
CREATE TABLE badminton."Attachment" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 CYCLE),
    "post_id" INTEGER,
    "comment_id" INTEGER,
    "file_type" VARCHAR(20) NOT NULL CHECK ("file_type" IN ('IMAGE', 'VIDEO', 'DOCUMENT', 'LINK', 'GIF', 'AUDIO')),
    "file_path" VARCHAR(500) NOT NULL,
    "file_name" VARCHAR(255) NOT NULL,
    "file_size" BIGINT,
    "mime_type" VARCHAR(100),
    "file_metadata" JSONB,
    "created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    PRIMARY KEY ("id"),
    CONSTRAINT attachment_post_id_fkey FOREIGN KEY ("post_id") REFERENCES badminton."Post"("id") ON DELETE CASCADE,
    CONSTRAINT attachment_comment_id_fkey FOREIGN KEY ("comment_id") REFERENCES badminton."Comment"("id") ON DELETE CASCADE,
    CONSTRAINT attachment_either_post_or_comment CHECK (
        ("post_id" IS NOT NULL AND "comment_id" IS NULL) OR 
        ("post_id" IS NULL AND "comment_id" IS NOT NULL)
    )
);

-- Post reactions table
DROP TABLE IF EXISTS badminton."PostReaction" CASCADE;
CREATE TABLE badminton."PostReaction" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 CYCLE),
    "post_id" INTEGER NOT NULL,
    "user_id" INTEGER NOT NULL,
    "emoji" VARCHAR(10) NOT NULL,
    "created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    PRIMARY KEY ("id"),
    CONSTRAINT post_reaction_post_id_fkey FOREIGN KEY ("post_id") REFERENCES badminton."Post"("id") ON DELETE CASCADE,
    CONSTRAINT post_reaction_user_id_fkey FOREIGN KEY ("user_id") REFERENCES badminton."User"("id") ON DELETE CASCADE,
    CONSTRAINT unique_user_emoji_per_post UNIQUE ("post_id", "user_id", "emoji")
);

-- Comment reactions table
DROP TABLE IF EXISTS badminton."CommentReaction" CASCADE;
CREATE TABLE badminton."CommentReaction" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 CYCLE),
    "comment_id" INTEGER NOT NULL,
    "user_id" INTEGER NOT NULL,
    "emoji" VARCHAR(10) NOT NULL,
    "created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    PRIMARY KEY ("id"),
    CONSTRAINT comment_reaction_comment_id_fkey FOREIGN KEY ("comment_id") REFERENCES badminton."Comment"("id") ON DELETE CASCADE,
    CONSTRAINT comment_reaction_user_id_fkey FOREIGN KEY ("user_id") REFERENCES badminton."User"("id") ON DELETE CASCADE,
    CONSTRAINT unique_user_emoji_per_comment UNIQUE ("comment_id", "user_id", "emoji")
);

-- ============================================================================
-- INDEXES FOR PERFORMANCE
-- ============================================================================

-- User indexes
CREATE INDEX idx_user_username ON badminton."User"("username");
CREATE INDEX idx_user_email ON badminton."User"("email");
CREATE INDEX idx_user_role_id ON badminton."User"("role_id");
CREATE INDEX idx_user_profile_picture ON badminton."User"("profile_picture_url");

-- Match indexes
CREATE INDEX idx_match_player1_id ON badminton."Match"("player1_id");
CREATE INDEX idx_match_player2_id ON badminton."Match"("player2_id");
CREATE INDEX idx_match_status ON badminton."Match"("status");
CREATE INDEX idx_match_type ON badminton."Match"("match_type");
CREATE INDEX idx_match_tournament_id ON badminton."Match"("tournament_id");
CREATE INDEX idx_match_player1_verified ON badminton."Match"("player1_verified");
CREATE INDEX idx_match_player2_verified ON badminton."Match"("player2_verified");
CREATE INDEX idx_match_verification_status ON badminton."Match"("player1_verified", "player2_verified");

-- Tournament indexes
CREATE INDEX idx_tournament_is_active ON badminton."Tournament"("is_active");

-- Medal indexes
CREATE INDEX idx_medals_user_id ON badminton.medals(user_id);
CREATE INDEX idx_medals_tournament_id ON badminton.medals(tournament_id);
CREATE INDEX idx_medals_medal_type ON badminton.medals(medal_type);

-- Tournament invitation indexes
CREATE INDEX idx_tournament_participants_tournament_id ON badminton.tournament_participants(tournament_id);
CREATE INDEX idx_tournament_participants_user_id ON badminton.tournament_participants(user_id);
CREATE INDEX idx_tournament_invitations_tournament_id ON badminton.tournament_invitations(tournament_id);
CREATE INDEX idx_tournament_invitations_user_id ON badminton.tournament_invitations(user_id);
CREATE INDEX idx_tournament_invitations_status ON badminton.tournament_invitations(status);

-- Report indexes
CREATE INDEX idx_reports_created_by ON badminton.reports(created_by_id);
CREATE INDEX idx_reports_event_date ON badminton.reports(event_date);
CREATE INDEX idx_reports_created_at ON badminton.reports(created_at);
CREATE INDEX idx_reports_content_search ON badminton.reports USING gin(to_tsvector('english', content));
CREATE INDEX idx_report_reactions_report_id ON badminton.report_reactions(report_id);
CREATE INDEX idx_report_reactions_user_id ON badminton.report_reactions(user_id);
CREATE INDEX idx_report_views_report_id ON badminton.report_views(report_id);
CREATE INDEX idx_report_views_user_id ON badminton.report_views(user_id);
CREATE INDEX idx_report_views_viewed_at ON badminton.report_views(viewed_at);

-- Post indexes
CREATE INDEX idx_post_user_id ON badminton."Post"("user_id");
CREATE INDEX idx_post_created_at ON badminton."Post"("created_at" DESC);
CREATE INDEX idx_post_is_deleted ON badminton."Post"("is_deleted");

-- Comment indexes
CREATE INDEX idx_comment_post_id ON badminton."Comment"("post_id");
CREATE INDEX idx_comment_user_id ON badminton."Comment"("user_id");
CREATE INDEX idx_comment_parent_comment_id ON badminton."Comment"("parent_comment_id");
CREATE INDEX idx_comment_created_at ON badminton."Comment"("created_at" DESC);
CREATE INDEX idx_comment_is_deleted ON badminton."Comment"("is_deleted");

-- Attachment indexes
CREATE INDEX idx_attachment_post_id ON badminton."Attachment"("post_id");
CREATE INDEX idx_attachment_comment_id ON badminton."Attachment"("comment_id");
CREATE INDEX idx_attachment_file_type ON badminton."Attachment"("file_type");

-- Reaction indexes
CREATE INDEX idx_post_reaction_post_id ON badminton."PostReaction"("post_id");
CREATE INDEX idx_post_reaction_user_id ON badminton."PostReaction"("user_id");
CREATE INDEX idx_comment_reaction_comment_id ON badminton."CommentReaction"("comment_id");
CREATE INDEX idx_comment_reaction_user_id ON badminton."CommentReaction"("user_id");

-- Access control indexes
CREATE INDEX idx_roles_permissions_role_id ON access_control."RolesPermissions"("role_id");
CREATE INDEX idx_roles_permissions_permission_id ON access_control."RolesPermissions"("permission_id");

-- ============================================================================
-- SAMPLE DATA
-- ============================================================================

-- Insert default roles
INSERT INTO access_control."Role" ("role_id", "role_name", "locked") VALUES
(1, 'admin', 't'),
(2, 'user', 't');

-- Insert permission groups
INSERT INTO access_control."PermissionGroup" ("permission_group_id", "permission_group_name") VALUES
(1, 'badminton_app');

-- Insert permissions for badminton app
INSERT INTO access_control."Permission" ("permission_id", "permission_key", "permission_group_id") VALUES
(1, 'admin', 1),
(2, 'users_can_view_user_list', 1),
(3, 'users_can_create_user', 1),
(4, 'users_can_edit_other_users', 1),
(5, 'matches_can_view_all', 1),
(6, 'matches_can_create', 1),
(7, 'matches_can_verify', 1),
(8, 'matches_can_edit_all', 1),
(9, 'tournaments_can_view_all', 1),
(10, 'tournaments_can_create', 1),
(11, 'tournaments_can_edit_all', 1),
(12, 'user', 1);

-- Assign permissions to roles
-- Admin gets all permissions
INSERT INTO access_control."RolesPermissions" ("role_id", "permission_id") VALUES
(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12);

-- User gets basic permissions
INSERT INTO access_control."RolesPermissions" ("role_id", "permission_id") VALUES
(2, 2), (2, 5), (2, 6), (2, 7), (2, 9), (2, 12);

-- Insert sample users (passwords are 'password123' hashed with pbkdf2_sha256)
INSERT INTO badminton."User" ("username", "email", "full_name", "hashed_password", "role_id") VALUES
('alice', 'alice@example.com', 'Alice Johnson', '$pbkdf2-sha256$29000$yBlDiBFiDEFoTakVgpAyBg$vKkJszu6Pa3Lk0c498VuVHDQ/5zTQ2VYAk0vni2uKwc', 2),
('bob', 'bob@example.com', 'Bob Smith', '$pbkdf2-sha256$29000$x3iv1bq3tnaulbJ2rtWacw$.E.dV59Yiit9cZnRpl8JM6spW1CFaYfezzhmrkUk73Y', 2),
('charlie', 'charlie@example.com', 'Charlie Brown', '$pbkdf2-sha256$29000$jHFu7R0DwPgfIwSAcE4pxQ$/TkMnwBV6wB.BMorZ8.wWClIDWkHQVYCI8QHSDPxyCE', 2),
('diana', 'diana@example.com', 'Diana Prince', '$pbkdf2-sha256$29000$4XwPoTTmnPNeK.V8zzkHQA$6YeUOtRvNZAEk4D7YFsDNoLcvYnATv2xMl63EQA6KbA', 2);

-- Insert sample tournament
INSERT INTO badminton."Tournament" ("name", "description", "start_date", "end_date", "status") VALUES
('Spring Championship 2024', 'Annual spring badminton tournament', NOW() + INTERVAL '7 days', NOW() + INTERVAL '14 days', 'active');

-- Insert sample matches
INSERT INTO badminton."Match" (
    "player1_id", "player2_id", "player1_score", "player2_score", 
    "match_type", "status", "submitted_by_id", "verified_by_id", 
    "notes", "verified_at", "player1_verified", "player2_verified"
) VALUES
(1, 2, 21, 18, 'CASUAL', 'VERIFIED', 1, 2, 'Great match!', NOW(), TRUE, TRUE),
(3, 4, 19, 21, 'CASUAL', 'PENDING_VERIFICATION', 3, NULL, 'Waiting for verification', NULL, FALSE, FALSE),
(1, 4, 21, 15, 'TOURNAMENT', 'VERIFIED', 1, 4, 'Tournament match', NOW(), TRUE, TRUE);

-- Update the tournament match to reference the tournament
UPDATE badminton."Match" 
SET "tournament_id" = 1 
WHERE "id" = 3;

-- ============================================================================
-- COMPLETION MESSAGE
-- ============================================================================

-- Display completion message
DO $$
BEGIN
    RAISE NOTICE 'Badminton App database initialization completed successfully!';
    RAISE NOTICE 'Created schemas: badminton, access_control';
    RAISE NOTICE 'Created tables: User, Tournament, Match, Medals, Reports, Posts, Comments, Attachments, Reactions, Views, Invitations, Participants';
    RAISE NOTICE 'Created access control system with roles and permissions';
    RAISE NOTICE 'Inserted sample data: 4 users, 1 tournament, 3 matches';
    RAISE NOTICE 'All indexes created for optimal performance';
END $$;
