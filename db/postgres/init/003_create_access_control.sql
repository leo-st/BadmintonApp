-- Create access control schema and tables
SET search_path TO access_control, public;

-- Create access_control schema
CREATE SCHEMA IF NOT EXISTS access_control;

-- Role table
DROP TABLE IF EXISTS access_control."Role" CASCADE;
CREATE TABLE access_control."Role" (
	"role_id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 CYCLE),
	"role_name" text NOT NULL DEFAULT 'Neuer Benutzertyp'::text,
	"locked" bool NOT NULL DEFAULT TRUE,
	PRIMARY KEY ("role_id")
);

-- PermissionGroup table
DROP TABLE IF EXISTS access_control."PermissionGroup" CASCADE;
CREATE TABLE access_control."PermissionGroup" (
	"permission_group_id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 CYCLE),
	"permission_group_name" text NOT NULL DEFAULT 'permission_group_x'::text,
	PRIMARY KEY ("permission_group_id"),
	CONSTRAINT permission_group_permission_group_name_key UNIQUE ("permission_group_name")
);

-- Permission table
DROP TABLE IF EXISTS access_control."Permission" CASCADE;
CREATE TABLE access_control."Permission" (
	"permission_id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 CYCLE),
	"permission_key" text NOT NULL DEFAULT 'can_do_x'::text,
	"permission_group_id" int4 NULL,
	PRIMARY KEY ("permission_id"),
	CONSTRAINT app_permission_permission_key_key UNIQUE ("permission_key"),
	CONSTRAINT permission_permission_group_id_fkey FOREIGN KEY ("permission_group_id") REFERENCES access_control."PermissionGroup"(permission_group_id)
);

-- User table (updated to match access control requirements)
DROP TABLE IF EXISTS access_control."User" CASCADE;
CREATE TABLE access_control."User" (
	"id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 CYCLE),
    "username" varchar(255) NOT NULL UNIQUE, 
	"email" varchar(255) NOT NULL,
	"first_name" varchar(255) NULL,
	"last_name" varchar(255) NULL,
	"enabled" bool NOT NULL,
    "welcome_message" varchar NULL,
	"language" varchar(255) NOT NULL DEFAULT 'DE'::character varying,
	"pw_hash" varchar(255) NOT NULL,
	"pw_reset_required" bool NOT NULL DEFAULT true,
	"role_id" int4 NULL,
	PRIMARY KEY ("id"),
	CONSTRAINT user_username_unique_key UNIQUE ("username"),
	CONSTRAINT user_role_id_fkey FOREIGN KEY ("role_id") REFERENCES access_control."Role"("role_id")
);

-- RolesPermissions junction table
DROP TABLE IF EXISTS access_control."RolesPermissions" CASCADE;
CREATE TABLE access_control."RolesPermissions" (
	"role_id" int4 NOT NULL,
	"permission_id" int4 NOT NULL,
	CONSTRAINT roles_permissions_permission_id_pkey PRIMARY KEY ("role_id", "permission_id"),
	CONSTRAINT roles_permissions_permission_id_fkey FOREIGN KEY ("permission_id") REFERENCES access_control."Permission"("permission_id") ON DELETE CASCADE,
	CONSTRAINT roles_permissions_role_id_fkey FOREIGN KEY ("role_id") REFERENCES access_control."Role"("role_id") ON DELETE CASCADE
);

-- Insert default roles
INSERT INTO access_control."Role" ("role_id", "role_name", "locked") VALUES
(1, 'admin', 't'),
(2, 'user', 't');

-- Insert permission groups
INSERT INTO access_control."PermissionGroup" ("permission_group_id", "permission_group_name") VALUES
(1, 'badminton_app');

-- Insert permissions for badminton app
INSERT INTO access_control."Permission" ("permission_id", "permission_key", "permission_group_id") VALUES
(1, 'admin', 1),
(2, 'users_can_view_user_list', 1),
(3, 'users_can_create_user', 1),
(4, 'users_can_edit_other_users', 1),
(5, 'matches_can_view_all', 1),
(6, 'matches_can_create', 1),
(7, 'matches_can_verify', 1),
(8, 'matches_can_edit_all', 1),
(9, 'tournaments_can_view_all', 1),
(10, 'tournaments_can_create', 1),
(11, 'tournaments_can_edit_all', 1),
(12, 'user', 1);

-- Insert default users
INSERT INTO access_control."User" ("username", "email", "first_name", "last_name", "enabled", "welcome_message","language", "pw_hash", "pw_reset_required", "role_id") VALUES
('dev.team','dev.dev@prognosix.com', 'Dev', 'Team', true, '', 'DE', '$pbkdf2-sha256$29000$2/t/D8HY./8/h3CutTbmHA$Tl8DhpkoBDe6YlxyQJnz/Vo3jeaSv7Qa5DVoy.Zf040', true, 1 ),
('leo.ivas','leo.ivas@prognosix.com', 'Leo', 'Ivas', true, '', 'DE', '$pbkdf2-sha256$29000$2/t/D8HY./8/h3CutTbmHA$Tl8DhpkoBDe6YlxyQJnz/Vo3jeaSv7Qa5DVoy.Zf040', true, 2 );

-- Assign permissions to roles
-- Admin gets all permissions
INSERT INTO access_control."RolesPermissions" ("role_id", "permission_id") VALUES
(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12);

-- User gets basic permissions
INSERT INTO access_control."RolesPermissions" ("role_id", "permission_id") VALUES
(2, 2), (2, 5), (2, 6), (2, 9), (2, 12);

-- Create indexes for better performance
CREATE INDEX idx_access_control_user_username ON access_control."User"("username");
CREATE INDEX idx_access_control_user_email ON access_control."User"("email");
CREATE INDEX idx_access_control_user_role_id ON access_control."User"("role_id");
CREATE INDEX idx_roles_permissions_role_id ON access_control."RolesPermissions"("role_id");
CREATE INDEX idx_roles_permissions_permission_id ON access_control."RolesPermissions"("permission_id");

